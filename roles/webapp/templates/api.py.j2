from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import subprocess
import json
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

SETTINGS_FILE = "/etc/motec/service_settings.json"

@app.route('/api/status')
def get_status():
    try:
        # Use systemctl's machine-readable output
        result = subprocess.run(['sudo', 'systemctl', 'is-active', 'sim-to-motec.service'], capture_output=True, text=True)
        status_text = result.stdout.strip()
        is_active = status_text == 'active'
        
        with open(SETTINGS_FILE, 'r') as f:
            settings = json.load(f)

        return jsonify({
            'status': status_text,
            'is_active': is_active,
            'config': settings
        })
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/logs')
def get_logs():
    try:
        result = subprocess.run(['sudo', 'journalctl', '-u', 'sim-to-motec.service', '-n', '50', '--no-pager'], capture_output=True, text=True)
        return jsonify({'logs': result.stdout})
    except Exception as e:
        return jsonify({'logs': f"Error fetching logs: {str(e)}"}), 500

@app.route('/api/control', methods=['POST'])
def control_service():
    action = request.json.get('action')
    valid_actions = ['start', 'stop', 'restart']
    if action not in valid_actions:
        return jsonify({'status': 'error', 'message': 'Invalid action'}), 400
    try:
        subprocess.run(['sudo', 'systemctl', action, 'sim-to-motec.service'], check=True)
        return jsonify({'status': 'success', 'message': f'Service {action} command sent.'})
    except subprocess.CalledProcessError as e:
        return jsonify({'status': 'error', 'message': f'Failed to {action} service: {e.stderr}'}), 500

@app.route('/api/save_and_restart', methods=['POST'])
def save_and_restart():
    new_settings = request.json
    try:
        with open(SETTINGS_FILE, 'r') as f:
            config = json.load(f)
        
        config['driver'] = new_settings.get('driver', config.get('driver', ''))
        config['session'] = new_settings.get('session', config.get('session', ''))
        config['replay'] = new_settings.get('replay', config.get('replay', False))

        with open(SETTINGS_FILE, 'w') as f:
            json.dump(config, f, indent=4)
        
        subprocess.run(['sudo', 'systemctl', 'restart', 'sim-to-motec.service'], check=True)
        return jsonify({'status': 'success', 'message': 'Settings saved and service restarted.'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/live_status')
def get_live_status():
    live_file = '/tmp/sim-to-motec-live.json'
    if not os.path.exists(live_file):
        return jsonify({'status': 'disconnected'})

    try:
        with open(live_file, 'r') as f:
            data = json.load(f)
        # check if the file is older than 5 seconds
        if os.path.getmtime(live_file) < (os.path.getmtime(live_file) - 5):
            return jsonify({'status': 'disconnected'})
        data['status'] = 'connected'
        return jsonify(data)
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port={{ webapp_port | int }})

@app.route('/api/logs', methods=['GET'])
def list_logs():
    log_dir = '{{ app_dest }}/logs/{{ sim_type }}'
    if not os.path.exists(log_dir):
        return jsonify([])
    
    log_files = [f for f in os.listdir(log_dir) if f.endswith('.ld')]
    
    files_with_details = []
    for f in log_files:
        file_path = os.path.join(log_dir, f)
        files_with_details.append({
            'name': f,
            'size': os.path.getsize(file_path),
            'modified': os.path.getmtime(file_path)
        })
    
    sorted_files = sorted(files_with_details, key=lambda k: k['modified'], reverse=True)
    
    return jsonify(sorted_files)

@app.route('/api/logs/<filename>', methods=['GET'])
def download_log(filename):
    log_dir = '{{ app_dest }}/logs/{{ sim_type }}'
    return send_from_directory(log_dir, filename, as_attachment=True)

