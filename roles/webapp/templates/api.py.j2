from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import JSONResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
import subprocess
import json
import os
from typing import List
import asyncio

from gt7.telemetry import GT7Logger
from gt7.sampler import GT7Sampler
from gt7.database import Database

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

SETTINGS_FILE = "/etc/motec/service_settings.json"
DB_FILE = "/var/lib/motec/sessions.db"

class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)

manager = ConnectionManager()

# Create a database instance
db = Database(db_file=DB_FILE)
db.create_tables()

# Load configuration
with open(SETTINGS_FILE, 'r') as f:
    settings = json.load(f)

# Create a logger to process and save the data
logger = GT7Logger(
    imperial=settings.get("imperial", False),
    driver=settings.get("driver", ""),
    session=settings.get("session", ""),
    vehicle=settings.get("vehicle", ""),
    venue=settings.get("venue", ""),
    manager=manager,
    db=db
)

# Create a sampler to receive telemetry data
sampler = GT7Sampler(addr=settings.get("ps_ip"), port=settings.get("port"))
sampler.callback = lambda timestamp, sample: logger.process_sample(timestamp, sample)

@app.on_event("startup")
async def startup_event():
    # Start the sampler
    sampler.start()
    # Start the consumer tasks
    asyncio.create_task(logger._log_writer_task())
    asyncio.create_task(logger._websocket_broadcaster_task())
    asyncio.create_task(logger._db_writer_task())

@app.on_event("shutdown")
def shutdown_event():
    sampler.stop()
    sampler.join()
    logger.save_log()
    db.close()

@app.get("/api/status")
def get_status():
    try:
        result = subprocess.run(['sudo', 'systemctl', 'is-active', 'sim-to-motec.service'], capture_output=True, text=True)
        status_text = result.stdout.strip()
        is_active = status_text == 'active'
        
        with open(SETTINGS_FILE, 'r') as f:
            settings = json.load(f)

        return JSONResponse({
            'status': status_text,
            'is_active': is_active,
            'config': settings
        })
    except Exception as e:
        return JSONResponse({'status': 'error', 'message': str(e)}, status_code=500)

@app.get("/api/logs")
def get_logs():
    try:
        result = subprocess.run(['sudo', 'journalctl', '-u', 'sim-to-motec.service', '-n', '50', '--no-pager'], capture_output=True, text=True)
        return JSONResponse({'logs': result.stdout})
    except Exception as e:
        return JSONResponse({'logs': f"Error fetching logs: {str(e)}"}, status_code=500)

@app.post("/api/control")
async def control_service(request: Request):
    data = await request.json()
    action = data.get('action')
    valid_actions = ['start', 'stop', 'restart']
    if action not in valid_actions:
        return JSONResponse({'status': 'error', 'message': 'Invalid action'}, status_code=400)
    try:
        subprocess.run(['sudo', 'systemctl', action, 'sim-to-motec.service'], check=True)
        return JSONResponse({'status': 'success', 'message': f'Service {action} command sent.'})
    except subprocess.CalledProcessError as e:
        return JSONResponse({'status': 'error', 'message': f'Failed to {action} service: {e.stderr}'}, status_code=500)

@app.post("/api/save_and_restart")
async def save_and_restart(request: Request):
    new_settings = await request.json()
    try:
        with open(SETTINGS_FILE, 'r') as f:
            config = json.load(f)
        
        config['driver'] = new_settings.get('driver', config.get('driver', ''))
        config['session'] = new_settings.get('session', config.get('session', ''))
        config['replay'] = new_settings.get('replay', config.get('replay', False))

        with open(SETTINGS_FILE, 'w') as f:
            json.dump(config, f, indent=4)
        
        subprocess.run(['sudo', 'systemctl', 'restart', 'sim-to-motec.service'], check=True)
        return JSONResponse({'status': 'success', 'message': 'Settings saved and service restarted.'})
    except Exception as e:
        return JSONResponse({'status': 'error', 'message': str(e)}, status_code=500)

@app.get("/api/live_status")
def get_live_status():
    return JSONResponse(logger.get_latest_data())

@app.get("/api/logs_files")
def list_logs():
    log_dir = '{{ app_dest }}/logs/{{ sim_type }}'
    if not os.path.exists(log_dir):
        return JSONResponse([])
    
    log_files = [f for f in os.listdir(log_dir) if f.endswith('.ld')]
    
    files_with_details = []
    for f in log_files:
        file_path = os.path.join(log_dir, f)
        files_with_details.append({
            'name': f,
            'size': os.path.getsize(file_path),
            'modified': os.path.getmtime(file_path)
        })
    
    sorted_files = sorted(files_with_details, key=lambda k: k['modified'], reverse=True)
    
    return JSONResponse(sorted_files)

@app.get("/api/sessions")
def get_sessions():
    return JSONResponse(db.get_sessions())

@app.get("/api/logs/{filename}")
def download_log(filename: str):
    log_dir = '{{ app_dest }}/logs/{{ sim_type }}'
    file_path = os.path.join(log_dir, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path, media_type='application/octet-stream', filename=filename)
    return JSONResponse({'status': 'error', 'message': 'File not found'}, status_code=404)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            await websocket.receive_text()
            # We don't expect messages from the client, just broadcasting
    except WebSocketDisconnect:
        manager.disconnect(websocket)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port={{ webapp_port | int }})
